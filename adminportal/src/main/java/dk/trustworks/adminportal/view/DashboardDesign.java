package dk.trustworks.adminportal.view;

import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.model.*;
import com.vaadin.addon.charts.model.style.SolidColor;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.data.Property;
import com.vaadin.ui.*;
import com.vaadin.ui.declarative.Design;
import dk.trustworks.adminportal.cache.DataContainer;
import dk.trustworks.adminportal.domain.*;
import dk.trustworks.framework.model.User;
import org.joda.time.*;

import java.text.DateFormatSymbols;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.*;


@DesignRoot
@AutoGenerated
@SuppressWarnings("serial")
public class DashboardDesign extends CssLayout {
    private final Slider slider = new Slider();

    protected CssLayout dashboard_item5;
	protected CssLayout dashboard_item26;
	protected CssLayout dashboard_item27;
    protected CssLayout dashboard_item28;
    protected CssLayout dashboard_item29;
    protected CssLayout dashboard_item30;
    protected CssLayout dashboard_item31;
    protected CssLayout dashboard_item32;
    protected CssLayout dashboard_item33;
    protected CssLayout dashboard_item34;
    protected HorizontalLayout sparkline_horizontal;

    public static void main(String[] args) {
        int year = 2016;
        double weeks = 46.14285714285714;
        if(year == new DateTime().getYear()) weeks = (new DateTime().getDayOfYear() / 7.80769230769217f);
        System.out.println("new DateTime().getDayOfYear() = " + new DateTime().getDayOfYear());
        System.out.println("weeks = " + weeks);
        System.out.println(Math.round((215 / weeks) * 100.0) / 100.0);
    }

	public DashboardDesign() {
        initPage();
    }

    private void initPage() {
        Design.read(this);
        // TODO: Make this work
        /*
        Double[] revenuePerDay = dataAccess.getRevenuePerDay();
        final int[] intArray = new int[revenuePerDay.length];
        for (int i=0; i<intArray.length; ++i)
            intArray[i] = revenuePerDay[i].intValue();

        if(intArray.length>0) sparkline_horizontal.addComponent(new SparklineChart("income per day", "kkr", "today ", new SolidColor("#AAAA00"), intArray));
        //sparkline_horizontal.addComponent(new SparklineChart("income per day 2", "kkr", "today ", new SolidColor("#AAAA00"), intArray));
*/
        NativeSelect year_select;
        year_select = new NativeSelect("");
        LocalDate localDate = LocalDate.now();
        for (int i = 2014; i < localDate.getYear(); i++) {
            year_select.addItem(""+i);
        }

        String currentYear = ""+localDate.getYear();
        year_select.addItem(currentYear);
        year_select.setValue(currentYear);
        if(localDate.getMonthOfYear()>6) {
            year_select.addItem(""+(localDate.getYear()+1));
            year_select.setValue(""+(localDate.getYear()+1));
        }

        createGraphs(Integer.parseInt((String)year_select.getValue()));

        year_select.addValueChangeListener((Property.ValueChangeListener) e -> {
            Notification.show("Selected: ",
                    String.valueOf(e.getProperty().getValue()),
                    Notification.Type.TRAY_NOTIFICATION);
            createGraphs(Integer.parseInt((String)e.getProperty().getValue()));
        });
        sparkline_horizontal.addComponent(year_select);
    }

    private void createGraphs(int year) {
        LocalDate periodStart = new LocalDate(year-1, 7, 1);
        LocalDate periodEnd = new LocalDate(year, 6, 30);

        DataContainer dataContainer = new DataContainer(periodStart, periodEnd);

        //WorkRegistrationDelayChart workRegistrationDelayChart = new WorkRegistrationDelayChart(year);
        dashboard_item30.removeAllComponents();
        //dashboard_item30.addComponent(workRegistrationDelayChart);

        TopGrossingEmployeesChart topGrossingEmployeesChart = new TopGrossingEmployeesChart(year, dataContainer);
        dashboard_item5.removeAllComponents();
        dashboard_item5.addComponent(topGrossingEmployeesChart);

        TopGrossingProjectsChart topGrossingProjectsChart = new TopGrossingProjectsChart(year, dataContainer);
        dashboard_item26.removeAllComponents();
        dashboard_item26.addComponent(topGrossingProjectsChart);

        final AbsoluteLayout absoluteLayout = new AbsoluteLayout();
        //absoluteLayout.setWidth("100%");
        //absoluteLayout.setHeight("100%");

        slider.setImmediate(true);
        slider.setMin(0.0);
        slider.setMax(5.0);
        slider.setValue(0.0);

        RevenuePerMonthChart revenuePerMonthChart = new RevenuePerMonthChart(year, slider.getValue().intValue(), dataContainer);
        slider.addValueChangeListener(e -> {
            absoluteLayout.removeAllComponents();
            absoluteLayout.addComponent(new RevenuePerMonthChart(year, slider.getValue().intValue(), dataContainer));
            absoluteLayout.addComponent(slider, "right: 20px; top: 20px;");
            Notification.show("Number of months before set to:",
                    String.valueOf(e.getProperty().getValue()),
                    Notification.Type.TRAY_NOTIFICATION);
        });

        absoluteLayout.addComponent(revenuePerMonthChart);
        absoluteLayout.addComponent(slider, "right: 20px; top: 20px;");
        dashboard_item27.removeAllComponents();
        dashboard_item27.addComponent(absoluteLayout);

        CumulativeRevenuePerMonthChart cumulativeRevenuePerMonthChart = new CumulativeRevenuePerMonthChart(year, dataContainer);
        dashboard_item33.removeAllComponents();
        dashboard_item33.addComponent(cumulativeRevenuePerMonthChart);

        RevenuePerMonthByCapacityChart revenuePerMonthByCapacityChart = new RevenuePerMonthByCapacityChart(year, dataContainer);
        dashboard_item28.removeAllComponents();
        dashboard_item28.addComponent(revenuePerMonthByCapacityChart);

        //BillableHoursPerEmployeesChart billableHoursPerEmployeesChart = new BillableHoursPerEmployeesChart(year);
        dashboard_item29.removeAllComponents();
        //dashboard_item29.addComponent(billableHoursPerEmployeesChart);

        //RevenueRateChart revenueRateChart = new RevenueRateChart(year);
        dashboard_item31.removeAllComponents();
        //dashboard_item31.addComponent(revenueRateChart);

        //ProjectDetailChart projectDetailChart = new ProjectDetailChart();

        NetProfitPerEmployeesChart netProfitPerEmployeesChart = new NetProfitPerEmployeesChart(periodStart, periodEnd, dataContainer);
        dashboard_item32.removeAllComponents();
        dashboard_item32.addComponent(netProfitPerEmployeesChart);

        CumulativeFiscalYearIncomeChart cumulativeFiscalYearIncomeChart = new CumulativeFiscalYearIncomeChart(year, dataContainer);
        dashboard_item34.removeAllComponents();
        dashboard_item34.addComponent(cumulativeFiscalYearIncomeChart);
    }

    public class TopGrossingEmployeesChart extends Chart {

        public TopGrossingEmployeesChart(int year, DataContainer dataContainer) {
            setWidth("100%");
            setHeight("280px");

            setCaption("Top Grossing Employees Fiscal Year 07/"+(year-1)+" - 06/"+year);
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.COLUMN);
            getConfiguration().getChart().setAnimation(true);
            getConfiguration().getxAxis().getLabels().setEnabled(true);

            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            List<AmountPerItem> amountPerItemList = dataContainer.getUserRevenue();
            double sumRevenue = 0.0;
            for (AmountPerItem amountPerItem : amountPerItemList) {
                //System.out.println("amountPerItem = " + amountPerItem);
                sumRevenue += amountPerItem.amount;
            }
            double avgRevenue = sumRevenue / amountPerItemList.size();

            Collections.sort(amountPerItemList);
            String[] categories = new String[amountPerItemList.size()];
            DataSeries revenueList = new DataSeries("Revenue");
            DataSeries avgRevenueList = new DataSeries("Average Revenue");
            PlotOptionsLine options2 = new PlotOptionsLine();
            options2.setColor(SolidColor.BLACK);
            options2.setMarker(new Marker(false));
            avgRevenueList.setPlotOptions(options2);

            int i = 0;
            for (AmountPerItem amountPerItem : amountPerItemList) {
                revenueList.add(new DataSeriesItem(amountPerItem.description, amountPerItem.amount));
                avgRevenueList.add(new DataSeriesItem("Average revenue", avgRevenue));
                StringBuilder shortname = new StringBuilder();
                for (String s : amountPerItem.description.split(" ")) {
                    shortname.append(s.charAt(0));
                }
                categories[i++] = shortname.toString();
            }
            //revenueList.add(new DataSeriesItem("Remaining projects", sumOfRemainingProjects));
            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(revenueList);
            getConfiguration().addSeries(avgRevenueList);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class TopGrossingProjectsChart extends Chart {

        public TopGrossingProjectsChart(int year, DataContainer dataContainer) {
            LocalDate periodStart = new LocalDate(year-1, 7, 01);
            LocalDate periodEnd = new LocalDate(year, 6, 30);

            setWidth("100%");  // 100% by default
            setHeight("280px"); // 400px by default
            //setSizeFull();

            setCaption("Top Grossing Projects Fiscal Year 07/"+(year-1)+" - 06/"+year);
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.COLUMN);
            getConfiguration().getChart().setAnimation(true);
            getConfiguration().getxAxis().getLabels().setEnabled(true);
            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            List<AmountPerItem> amountPerItemList = dataContainer.getProjectRevenue();
            Collections.sort(amountPerItemList);
            String[] categories = new String[amountPerItemList.size()];
            DataSeries listSeries = new DataSeries("Revenue");
            int i = 0;
            double sumOfRemainingProjects = 0.0;
            for (AmountPerItem amountPerItem : amountPerItemList) {
                if(i<10) {
                    listSeries.add(new DataSeriesItem(amountPerItem.description, amountPerItem.amount));
                    StringBuilder shortname = new StringBuilder();
                    String[] s = amountPerItem.description.split(" ");
                    //for (String s : amountPerItem.description.split(" ")) {
                    int subLength = s[0].length()<3?s[0].length():3;
                        shortname.append(s[0].substring(0,subLength));
                    //}
                    categories[i] = shortname.toString();
                } else {
                    sumOfRemainingProjects += amountPerItem.amount;
                    categories[10] = "Rest";
                }

                i++;
            }
            listSeries.add(new DataSeriesItem("Remaining projects", sumOfRemainingProjects));
            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(listSeries);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class RevenuePerMonthChart extends Chart {

        public RevenuePerMonthChart(int year, int ahead, DataContainer dataContainer) {
            LocalDate periodStart = new LocalDate(year-1, 7, 1);
            LocalDate periodEnd = new LocalDate(year, 6, 30);

            setWidth("100%");  // 100% by default
            setHeight("280px"); // 400px by default
            //setSizeFull();

            setCaption("Revenue and Budget per month");
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.AREASPLINE);
            getConfiguration().getChart().setAnimation(true);
            //getConfiguration().getxAxis().getLabels().setEnabled(false);
            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            long[] revenuePerMonth = dataContainer.getRevenuePerMonth();
            //Long[] revenuePerMonthPrevYear = dataAccess.getRevenuePerMonth(year-1);

            /*
            for (int i = 0; i < 6; i++) {
                revenuePerMonth[i+6] = revenuePerMonth[i];
            }
            for (int i = 0; i < 6; i++) {
                revenuePerMonth[i] = revenuePerMonthPrevYear[i+6];
            }
            */

            long[] allExpenses = dataContainer.getExpensesByMonth(null);
            //Long[] allExpensesPrevYear = dataAccess.getExpensesByPeriod(year-1);
/*
            for (int i = 0; i < 6; i++) {
                allExpenses[i+6] = allExpenses[i];
            }
            for (int i = 0; i < 6; i++) {
                allExpenses[i] = allExpensesPrevYear[i+6];
            }
*/
            long[] budgetPerMonth = dataContainer.getBudgetPerMonth(ahead);
            //Long[] budgetPerMonthPrevYear = dataAccess.getBudgetPerMonth(year-1, ahead);
/*
            for (int i = 0; i < 6; i++) {
                budgetPerMonth[i+6] = budgetPerMonth[i];
            }
            for (int i = 0; i < 6; i++) {
                budgetPerMonth[i] = budgetPerMonthPrevYear[i+6];
            }
*/
            DataSeries expensesList = new DataSeries("Expenses");
            PlotOptionsAreaspline options3 = new PlotOptionsAreaspline();
            options3.setColor(SolidColor.RED);
            options3.setMarker(new Marker(false));
            expensesList.setPlotOptions(options3);

            DataSeries budgetSeries = new DataSeries("Budget");
            PlotOptionsAreaspline options2 = new PlotOptionsAreaspline();
            options2.setColor(SolidColor.ORANGE);
            //options2.setMarker(new Marker(false));
            budgetSeries.setPlotOptions(options2);

            DataSeries revenueSeries = new DataSeries("Revenue");

            String[] categories = new String[12];

            for (int i = 0; i < 12; i++) {
                int month = periodStart.plusMonths(i).getMonthOfYear();
                revenueSeries.add(new DataSeriesItem(Month.of(month).getDisplayName(TextStyle.FULL, Locale.ENGLISH), revenuePerMonth[i]));
                expensesList.add(new DataSeriesItem("Expense for "+Month.of(periodStart.plusMonths(month).getMonthOfYear()).getDisplayName(TextStyle.FULL, Locale.ENGLISH), allExpenses[i]));
                budgetSeries.add(new DataSeriesItem(Month.of(month).getDisplayName(TextStyle.FULL, Locale.ENGLISH), budgetPerMonth[i]));
                categories[i] = Month.of(month).getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
                //month++;
                //if(month>12) month = 1;
            }


            //for (int i = 0; i < 12; i++) {

            //}
            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(budgetSeries);
            getConfiguration().addSeries(revenueSeries);
            if(slider.getValue() < 1) getConfiguration().addSeries(expensesList);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
            setCaption("Revenue and Budget per month");
        }
    }

    public class CumulativeRevenuePerMonthChart extends Chart {

        public CumulativeRevenuePerMonthChart(int year, DataContainer dataContainer) {
            LocalDate periodStart = new LocalDate(year-1, 7, 01);
            LocalDate periodEnd = new LocalDate(year, 6, 30);

            setWidth("100%");  // 100% by default
            setHeight("280px"); // 400px by default
            //setSizeFull();

            setCaption("Cumulative Revenue and Expenses Fiscal Year 07/"+(year-1)+" - 06/"+year);
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.AREASPLINE);
            getConfiguration().getChart().setAnimation(true);
            //getConfiguration().getxAxis().getLabels().setEnabled(false);
            //getConfiguration().getxAxis().setCategories(new DateFormatSymbols(Locale.ENGLISH).getShortMonths());
            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            long[] revenuePerMonth = dataContainer.getRevenuePerMonth();
            //Long[] revenuePerMonthPrevYear = dataAccess.getRevenuePerMonth(year-1);

            /*
            for (int i = 0; i < 6; i++) {
                revenuePerMonth[i+6] = revenuePerMonth[i];
            }
            for (int i = 0; i < 6; i++) {
                revenuePerMonth[i] = revenuePerMonthPrevYear[i+6];
            }
            */

            long[] allExpenses = dataContainer.getExpensesByMonth(null);

            //Long[] allExpensesPrevYear = dataAccess.getExpensesByPeriod(year-1);
/*
            for (int i = 0; i < 6; i++) {
                allExpenses[i+6] = allExpenses[i];
            }
            for (int i = 0; i < 6; i++) {
                allExpenses[i] = allExpensesPrevYear[i+6];
            }
*/
            DataSeries expensesList = new DataSeries("Expenses");
            PlotOptionsAreaspline options3 = new PlotOptionsAreaspline();
            options3.setColor(SolidColor.RED);
            options3.setMarker(new Marker(false));
            expensesList.setPlotOptions(options3);

            DataSeries revenueSeries = new DataSeries("Revenue");
            double cumulativeRevenuePerMonth = 0.0;
            double cumulativeExpensesPerMonth = 0.0;
            //int month = 7;
            String[] categories = new String[12];
            for (int i = 0; i < 12; i++) {
                int month = periodStart.plusMonths(i).getMonthOfYear();

                revenueSeries.add(new DataSeriesItem(Month.of(month).getDisplayName(TextStyle.FULL, Locale.ENGLISH), revenuePerMonth[i] + cumulativeRevenuePerMonth));
                expensesList.add(new DataSeriesItem("Expense for "+Month.of(month).getDisplayName(TextStyle.FULL, Locale.ENGLISH), allExpenses[i] + cumulativeExpensesPerMonth));
                categories[i] = Month.of(month).getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
                cumulativeRevenuePerMonth += revenuePerMonth[i];

                cumulativeExpensesPerMonth += allExpenses[i];
                //month++;
                //if(month>12) month = 1;
            }

            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(revenueSeries);
            getConfiguration().addSeries(expensesList);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class CumulativeFiscalYearIncomeChart extends Chart {

        public CumulativeFiscalYearIncomeChart(int year, DataContainer dataContainer) {
            LocalDate periodStart = new LocalDate(year-1, 7, 01);
            LocalDate periodEnd = new LocalDate(year, 6, 30);

            setWidth("100%");  // 100% by default
            setHeight("280px"); // 400px by default
            //setSizeFull();

            setCaption("Cumulative Income Fiscal Year 07/"+(year-1)+" - 06/"+year);
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.AREASPLINE);
            getConfiguration().getChart().setAnimation(true);
            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            //double[] income = dataAccess.getFiscalYearIncome(year);
            double[] income = new double[12];

            long[] revenuePerMonth = dataContainer.getRevenuePerMonth();
            long[] expensesByMonth = dataContainer.getExpensesByMonth(null);

            for (int i = 0; i < income.length; i++) {
                income[i] = revenuePerMonth[i] - expensesByMonth[i];
            }

            DataSeries revenueSeries = new DataSeries("Income");
            double cumulativeIncomePerMonth = 0.0;
            String[] categories = new String[12];
            for (int i = 0; i < 12; i++) {
                int month = periodStart.plusMonths(i).getMonthOfYear();
                //if(i>11) month = i-12;
                revenueSeries.add(new DataSeriesItem(Month.of(month).getDisplayName(TextStyle.FULL, Locale.ENGLISH), income[i] + cumulativeIncomePerMonth));
                categories[i] = Month.of(month).getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
                cumulativeIncomePerMonth += income[i];
            }

            getConfiguration().getxAxis().setCategories(categories);

            getConfiguration().addSeries(revenueSeries);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class RevenuePerMonthByCapacityChart extends Chart {

        public RevenuePerMonthByCapacityChart(int year, DataContainer dataContainer) {
            LocalDate periodStart = LocalDate.parse(year+"-01-01").minusMonths(6);
            LocalDate periodEnd = LocalDate.parse(year+"-12-31").minusMonths(6);

            setWidth("100%");  // 100% by default
            setHeight("280px"); // 400px by default

            setCaption("Revenue per month by Capacity");
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.AREASPLINE);
            getConfiguration().getChart().setAnimation(true);
            getConfiguration().getxAxis().setCategories(new DateFormatSymbols(Locale.ENGLISH).getShortMonths());
            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("Revenue");
            getConfiguration().getLegend().setEnabled(false);

            long[] revenuePerMonth = dataContainer.getRevenuePerMonth();//.getRevenuePerMonthByCapacity(year);
            List<Capacity> capacityPerMonth = dataContainer.getCapacityPerMonth();

            for (int i = 0; i < revenuePerMonth.length; i++) {
                revenuePerMonth[i] = revenuePerMonth[i] / capacityPerMonth.get(i).capacity;
            }


            //Long[] revenuePerMonthPrevYear = dataAccess.getRevenuePerMonthByCapacity(year-1);
            /*
            for (int i = 0; i < 6; i++) {
                revenuePerMonth[i+6] = revenuePerMonth[i];
            }
            for (int i = 0; i < 6; i++) {
                revenuePerMonth[i] = revenuePerMonthPrevYear[i+6];
            }
            */

            double sumRevenue = 0.0;
            for (Long amountPerItem : revenuePerMonth) {
                sumRevenue += amountPerItem;
            }
            double avgRevenue;

            int period = new Period(periodStart, LocalDate.now(), PeriodType.months()).getMonths();
            avgRevenue = (period>11)?sumRevenue / 12.0: sumRevenue / period;
/*
            if(year == LocalDate.now().getYear() && LocalDate.now().getMonthOfYear() >= 7) {
                avgRevenue = sumRevenue / LocalDate.now().getMonthOfYear() - 6;
                System.out.println("LocalDate.now().getMonthOfYear() - 6  " + (LocalDate.now().getMonthOfYear() - 6));
            } else if (year == LocalDate.now().getYear() && LocalDate.now().getMonthOfYear() < 7) {
                avgRevenue = sumRevenue / LocalDate.now().getMonthOfYear() + 6;
                System.out.println("LocalDate.now().getMonthOfYear() + 6 = " + (LocalDate.now().getMonthOfYear() + 6));
            } else {
                avgRevenue = sumRevenue / 12;
            }
*/
            DataSeries avgRevenueList = new DataSeries("Average Revenue");
            PlotOptionsLine options2 = new PlotOptionsLine();
            options2.setColor(SolidColor.DARKBLUE);
            options2.setMarker(new Marker(false));
            avgRevenueList.setPlotOptions(options2);

            long[] expensesByMonth = dataContainer.getExpensesByMonth(null);
            long[] expensesByCapacity = new long[12];
            for (int i = 0; i < expensesByCapacity.length; i++) {
                expensesByCapacity[i] = Math.round(expensesByMonth[i] / capacityPerMonth.get(i).capacity);
            }
            //List<Capacity> capacityPerMonth1 = dataAccess.getCapacityPerMonth(periodStart, periodEnd);

            /*
            Long[] allExpenses = dataAccess.getExpensesByCapacityByYear(year);
            Long[] allExpensesPrevYear = dataAccess.getExpensesByCapacityByYear(year-1);

            for (int i = 0; i < 6; i++) {
                allExpenses[i+6] = allExpenses[i];
            }
            for (int i = 0; i < 6; i++) {
                allExpenses[i] = allExpensesPrevYear[i+6];
            }
            */

            DataSeries expensesList = new DataSeries("Expenses");
            PlotOptionsAreaspline options3 = new PlotOptionsAreaspline();
            options3.setColor(SolidColor.RED);
            options3.setMarker(new Marker(false));
            expensesList.setPlotOptions(options3);

            String[] categories = new String[12];
            //int month = 7;
            DataSeries revenueSeries = new DataSeries("Revenue");
            for (int i = 0; i < 12; i++) {
                int month = periodStart.plusMonths(i).getMonthOfYear();
                revenueSeries.add(new DataSeriesItem(Month.of(month).getDisplayName(TextStyle.FULL, Locale.ENGLISH), revenuePerMonth[i]));
                avgRevenueList.add(new DataSeriesItem("Average revenue", avgRevenue));// for "+Month.of(i+1).getDisplayName(TextStyle.FULL, Locale.ENGLISH), avgRevenue));
                expensesList.add(new DataSeriesItem("Expense for "+Month.of(month).getDisplayName(TextStyle.FULL, Locale.ENGLISH), expensesByCapacity[i]));

                categories[i] = Month.of(month).getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
                //month++;
                //if(month>12) month = 1;
            }

            List<Capacity> capacityPerMonthByYearList = dataContainer.getCapacityPerMonth();
            int[] capacityPerMonthByYear = new int[capacityPerMonthByYearList.size()];
            int j = 0;
            for (Capacity capacity : capacityPerMonthByYearList) {
                capacityPerMonthByYear[j++] = capacity.capacity;
            }

            //int[] capacityPerMonthByYearPrevYear = dataAccess.getCapacityPerMonth(year-1);
/*
            for (int i = 0; i < 6; i++) {
                capacityPerMonthByYear[i+6] = capacityPerMonthByYear[i];
            }
            for (int i = 0; i < 6; i++) {
                capacityPerMonthByYear[i] = capacityPerMonthByYearPrevYear[i+6];
            }
*/
            ListSeries capacityList = new ListSeries("Capacity");

            YAxis yaxis = new YAxis();
            yaxis.setTitle("Capacity");
            yaxis.setOpposite(true);
            yaxis.setMin(0);
            getConfiguration().addyAxis(yaxis);

            PlotOptionsLine options4 = new PlotOptionsLine();
            options4.setColor(SolidColor.GRAY);
            options4.setMarker(new Marker(false));
            capacityList.setPlotOptions(options4);

            for (int i = 0; i < 12; i++) {
                capacityList.addData(capacityPerMonthByYear[i]/37.0f);
            }

            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(revenueSeries);
            getConfiguration().addSeries(expensesList);
            getConfiguration().addSeries(capacityList);
            //getConfiguration().addSeries(avgRevenueList);
            capacityList.setyAxis(yaxis);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class BillableHoursPerEmployeesChart extends Chart {

        public BillableHoursPerEmployeesChart(int year) {
            setWidth("100%");  // 100% by default
            setHeight("280px"); // 400px by default
            //setSizeFull();

            setCaption("Billable Hours per Employee");
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.COLUMN);
            getConfiguration().getChart().setAnimation(true);
            getConfiguration().getxAxis().getLabels().setEnabled(true);

            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            List<AmountPerItem> billableHoursPerUserList = null; //dataAccess.getBillableHoursPerUser(year, true);
            List<AmountPerItem> billableHoursPercentagePerUserList = null; //dataAccess.getBillableHoursPercentagePerUser(year, true);
/*
            Map<String, int[]> userAvailabilityPerMonthByYear = dataAccess.getUserAvailabilityPerMonthByYear(year);

            Map<String, Integer> userVacation = new HashMap<>();
            for (User user : dataAccess.getUsers()) {
                int vacationDays = 0;
                for (Double days : dataAccess.getFreeDaysPerMonthPerUser(year, user.getUseruuid())) {
                    vacationDays += days;
                }
                for (int i = 0; i < 12; i++) {
                    int[] availabilityPerMonth = userAvailabilityPerMonthByYear.get(user.getUseruuid());
                    int available = 0;
                    if(availabilityPerMonth!=null) available = availabilityPerMonth[i];
                    if(available==0) {
                        vacationDays += new DateTime(year, i+1, 1, 1, 1).dayOfMonth().getMaximumValue();
                    }
                }
                userVacation.put(user.getUseruuid(), vacationDays);
            }*/

            double sumHours = 0.0;
            for (AmountPerItem amountPerItem : billableHoursPerUserList) {
                sumHours += amountPerItem.amount;
            }
            double avgRevenue = sumHours / billableHoursPerUserList.size();

            Collections.sort(billableHoursPerUserList);
            String[] categories = new String[billableHoursPerUserList.size()];
            DataSeries revenueList = new DataSeries("Hours");
            DataSeries avgRevenueList = new DataSeries("Average Hours");
            PlotOptionsLine options2 = new PlotOptionsLine();
            options2.setColor(SolidColor.BLACK);
            options2.setMarker(new Marker(false));
            avgRevenueList.setPlotOptions(options2);
/*
            DataSeries avgPerWeek = new DataSeries("Billable Hours Percentage");

            YAxis yaxis = new YAxis();
            yaxis.setTitle("Billable Hours Percentage");
            yaxis.setOpposite(true);
            yaxis.setMin(0);
            getConfiguration().addyAxis(yaxis);

            PlotOptionsLine options3 = new PlotOptionsLine();
            options3.setColor(SolidColor.RED);
            avgPerWeek.setPlotOptions(options3);
*/
            DataSeries billableHoursPercentage = new DataSeries("Billable Hours Percentage");

            YAxis yaxis = new YAxis();
            yaxis.setTitle("Billable Hours Percentage");
            yaxis.setOpposite(true);
            yaxis.setMin(0);
            getConfiguration().addyAxis(yaxis);

            PlotOptionsLine options3 = new PlotOptionsLine();
            options3.setColor(SolidColor.RED);
            billableHoursPercentage.setPlotOptions(options3);

            Map<String, Double> userBillableHoursPercentageMap = new HashMap<>();
            for (AmountPerItem amountPerItem : billableHoursPercentagePerUserList) {
                userBillableHoursPercentageMap.put(amountPerItem.uuid, amountPerItem.amount);
            }

            int i = 0;
            for (AmountPerItem amountPerItem : billableHoursPerUserList) {
                revenueList.add(new DataSeriesItem(amountPerItem.description, amountPerItem.amount));
                billableHoursPercentage.add(new DataSeriesItem(amountPerItem.description, userBillableHoursPercentageMap.get(amountPerItem.uuid)));
                //double weeks = 52;
                //if(year == new DateTime().getYear()) weeks = ((new DateTime().getDayOfYear() - userVacation.get(amountPerItem.uuid)) / 7.0);
                //avgPerWeek.add(new DataSeriesItem(amountPerItem.description, (Math.round(((amountPerItem.amount / weeks) * 1) * 100.0) / 100.0)));
                avgRevenueList.add(new DataSeriesItem("Average hours", avgRevenue));
                StringBuilder shortname = new StringBuilder();
                for (String s : amountPerItem.description.split(" ")) {
                    shortname.append(s.charAt(0));
                }
                categories[i++] = shortname.toString();
            }

            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(revenueList);
            getConfiguration().addSeries(avgRevenueList);
            //getConfiguration().addSeries(avgPerWeek);
            getConfiguration().addSeries(billableHoursPercentage);
            billableHoursPercentage.setyAxis(yaxis);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class NetProfitPerEmployeesChart extends Chart {

        public NetProfitPerEmployeesChart(LocalDate periodStart, LocalDate periodEnd, DataContainer dataContainer) {
            //LocalDate periodStart = LocalDate.parse(year+"-01-01").minusMonths(6);
            //LocalDate periodEnd = LocalDate.parse(year+"-12-31").minusMonths(6);

            setWidth("100%");  // 100% by default
            setHeight("280px"); // 400px by default
            //setSizeFull();

            int currentMonth = LocalDate.now().getMonthOfYear();//new DateTime().getMonthOfYear();
            int currentYear = LocalDate.now().getYear();

            if((currentYear == periodEnd.getYear() && currentMonth > 6) || (currentYear > periodEnd.getYear()))
                setCaption("Net Profit per Employee for full year");
            else
                setCaption("Net Profit Per Employee to and including last month");

            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.COLUMN);
            getConfiguration().getChart().setAnimation(true);
            getConfiguration().getxAxis().getLabels().setEnabled(true);

            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            List<Salary> userSalaryPerMonthList = dataContainer.getUserSalaryPerMonthList();//dataAccess.getUserSalaryPerMonthByYear(periodStart, periodEnd);
            List<Capacity> capacityPerMonth = dataContainer.getCapacityPerMonth(); // dataAccess.getCapacityPerMonth(periodStart, periodEnd);
            long[] expensesByMonth = dataContainer.getExpensesByMonth(ExpenseType.EXPENSE); //dataAccess.getExpensesByPeriod(periodStart, periodEnd, ExpenseType.EXPENSE);
            List<Availability> userAvailabilityPerMonthList = dataContainer.getUserAvailabilityPerMonthList(); //dataAccess.getUserAvailabilityPerMonthByYear(periodStart, periodEnd);

            long[] allExpenses = new long[12];
            for (int i = 0; i < 12; i++) {
                allExpenses[i] = Math.round((expensesByMonth[i] / capacityPerMonth.get(i).capacity));
            }

            /*
            Long[] expensesByYear = dataAccess.getExpensesByCapacityByYearExceptSalary(year);
            Long[] expensesByYearPrevYear = dataAccess.getExpensesByCapacityByYearExceptSalary(year-1);
            for (int i = 0; i < 6; i++) {
                expensesByYear[i+6] = expensesByYear[i];
            }
            for (int i = 0; i < 6; i++) {
                expensesByYear[i] = expensesByYearPrevYear[i+6];
            }
            */

            Map<String, int[]> userAvailabilityPerMonthByYear = new HashMap<>();
            for (Availability availability: userAvailabilityPerMonthList) {
                if(!userAvailabilityPerMonthByYear.containsKey(availability.useruuid))
                    userAvailabilityPerMonthByYear.put(availability.useruuid, new int[12]);
                userAvailabilityPerMonthByYear.get(availability.useruuid)[Months.monthsBetween(periodStart, availability.activeDate).getMonths()] = 1;
            }

            int[] capacityPerMonthByYear = new int[capacityPerMonth.size()];
            int j = 0;
            for (Capacity capacity : capacityPerMonth) {
                capacityPerMonthByYear[j++] = capacity.capacity;
            }
            //int[] capacityPerMonthByYearPrevYear = dataAccess.getCapacityPerMonth(year-1);
            /*
            for (int i = 0; i < 6; i++) {
                capacityPerMonthByYear[i+6] = capacityPerMonthByYear[i];
            }
            for (int i = 0; i < 6; i++) {
                capacityPerMonthByYear[i] = capacityPerMonthByYearPrevYear[i+6];
            }
            */
            Map<String, User> userMap = new HashMap<>();
            for (User user : dataContainer.getUsers()) {
                userMap.put(user.getUUID(), user);
            }

            DataSeries netIncomeList = new DataSeries("Net Income");

            List<String> cats = new ArrayList<>();

            Map<String, int[]> userSalaryPerMonthByYear = new HashMap<>();
            for (Salary salary : userSalaryPerMonthList) {
                if(!userSalaryPerMonthByYear.containsKey(salary.useruuid))
                    userSalaryPerMonthByYear.put(salary.useruuid, new int[12]);
                userSalaryPerMonthByYear.get(salary.useruuid)[Months.monthsBetween(periodStart, salary.activeDate).getMonths()] = salary.salary;
            }

            for (String userUUID : userSalaryPerMonthByYear.keySet()) {
                boolean debug = false;
                if(userUUID.equals("7948c5e8-162c-4053-b905-0f59a21d7746")) debug = true;
                //if(debug) System.out.println("Hans...");

                double netIncome = 0.0;

                long[] revenuePerMonthPerUser = dataContainer.getRevenuePerMonthPerUser(userUUID);
                //Long[] revenuePerMonthPerUserPrevYear = dataAccess.getRevenuePerMonthPerUser(year-1, userUUID);
                /*
                for (int i = 0; i < 6; i++) {
                    revenuePerMonthPerUser[i+6] = revenuePerMonthPerUser[i];
                }
                for (int i = 0; i < 6; i++) {
                    revenuePerMonthPerUser[i] = revenuePerMonthPerUserPrevYear[i+6];
                }
                */
                int[] salaries = userSalaryPerMonthByYear.get(userUUID);

                int monthLimit = 0;

                int period = new Period(periodStart, LocalDate.now(), PeriodType.months()).getMonths();
                monthLimit = (period>11)?12:period;
                /*
                if(currentYear < year) monthLimit = currentMonth - 6 - 1;
                if(currentYear == year && currentMonth > 6) monthLimit = 12;
                if(currentYear == year && currentMonth <= 6) monthLimit = currentMonth + 6 - 1;
                if(currentYear > year) monthLimit = 12;
                if(debug) System.out.println("monthLimit = " + monthLimit);
                */
                //if(DateTime.now().getYear() > year) monthLimit = 12;

                for (int i = 0; i < monthLimit; i++) {
                    if(salaries[i] > 0.0 && userAvailabilityPerMonthByYear.get(userUUID) != null && userAvailabilityPerMonthByYear.get(userUUID)[i] == 1) {
                        //if(debug) System.out.println("netIncome = " + netIncome + " + " + (revenuePerMonthPerUser[i]));
                        netIncome += revenuePerMonthPerUser[i];
                        //if(debug) System.out.println("netIncome = " + netIncome + " + " + salaries[i]);
                        netIncome -= salaries[i];
                        //if(debug) System.out.println("expensesByYear = " + expensesByYear[i]*1000);
                        //if(debug) System.out.println("capacityPerMonthByYear = " + capacityPerMonthByYear[i]);
                        //if(debug) System.out.println("netIncome = " + netIncome + " + " + ((expensesByYear[i]*1000) + capacityPerMonthByYear[i]));
                        netIncome -= (allExpenses[i]);// / capacityPerMonthByYear[i];
                    }

                }
                if(netIncome > 0) {
                    StringBuilder shortname = new StringBuilder();
                    String name = userUUID;
                    if (userMap.get(userUUID) != null)
                        name = (userMap.get(userUUID).firstname + " " + userMap.get(userUUID).lastname);

                    for (String s : name.split(" ")) {
                        shortname.append(s.charAt(0));
                    }
                    cats.add(shortname.toString());
                    netIncomeList.add(new DataSeriesItem(name, netIncome));
                }
            }

            //Collections.sort(cats);
            String[] categories = new String[cats.size()];
            for (int i = 0; i < cats.size(); i++) {
                categories[i] = cats.get(i);
            }

            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(netIncomeList);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class WorkRegistrationDelayChart extends Chart {

        public WorkRegistrationDelayChart(int year, DataContainer dataContainer) {
            setWidth("100%");
            setHeight("280px");

            setCaption("Average Work registration delay");
            getConfiguration().setTitle("");
            getConfiguration().getChart().setType(ChartType.COLUMN);
            getConfiguration().getChart().setAnimation(true);
            getConfiguration().getxAxis().getLabels().setEnabled(true);

            getConfiguration().getxAxis().setTickWidth(0);
            getConfiguration().getyAxis().setTitle("");
            getConfiguration().getLegend().setEnabled(false);

            List<AmountPerItem> amountPerItemList = dataContainer.getWorkRegistrationDelay();
            double sumRevenue = 0.0;
            for (AmountPerItem amountPerItem : amountPerItemList) {
                double delay = 0.0;
                if(amountPerItem.amount>0) delay = (amountPerItem.amount / 24.0);
                sumRevenue += delay;
            }
            double avgRevenue = sumRevenue / amountPerItemList.size();

            Collections.sort(amountPerItemList);
            String[] categories = new String[amountPerItemList.size()];
            DataSeries revenueList = new DataSeries("Delay");
            DataSeries avgRevenueList = new DataSeries("Average Delay");
            PlotOptionsLine options2 = new PlotOptionsLine();
            options2.setColor(SolidColor.BLACK);
            options2.setMarker(new Marker(false));
            avgRevenueList.setPlotOptions(options2);


            int i = 0;
            for (AmountPerItem amountPerItem : amountPerItemList) {
                double delay = 0.0;
                if(amountPerItem.amount>0) delay = (amountPerItem.amount / 24.0);
                revenueList.add(new DataSeriesItem(amountPerItem.description, delay));
                avgRevenueList.add(new DataSeriesItem("Average delay", avgRevenue));
                StringBuilder shortname = new StringBuilder();
                for (String s : amountPerItem.description.split(" ")) {
                    shortname.append(s.charAt(0));
                }
                categories[i++] = shortname.toString();
            }
            getConfiguration().getxAxis().setCategories(categories);
            getConfiguration().addSeries(revenueList);
            getConfiguration().addSeries(avgRevenueList);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class RevenueRateChart extends Chart {

        public RevenueRateChart(int year, DataContainer dataContainer) {
            setWidth("100%");
            setHeight("280px");

            setCaption("Revenue rate past month compared to same time last year");
            getConfiguration().getChart().setType(ChartType.SOLIDGAUGE);

            getConfiguration().getTitle().setText("Revenue Rate");

            Pane pane = new Pane();
            pane.setCenter("50%", "85%");
            pane.setSize("140%");
            pane.setStartAngle(-90);
            pane.setEndAngle(90);
            getConfiguration().addPane(pane);

            getConfiguration().getTooltip().setEnabled(false);

            Background bkg = new Background();
            bkg.setBackgroundColor(new SolidColor("#eeeeee"));
            bkg.setInnerRadius("60%");
            bkg.setOuterRadius("100%");
            bkg.setShape("arc");
            bkg.setBorderWidth(0);
            pane.setBackground(bkg);

            YAxis yaxis = getConfiguration().getyAxis();
            yaxis.setLineWidth(0);
            yaxis.setTickInterval(100);
            yaxis.setTickWidth(0);
            yaxis.setMin(0);
            yaxis.setMax(200);
            yaxis.setTitle("");
            yaxis.getTitle().setY(-70);
            yaxis.getLabels().setY(16);
            Stop stop1 = new Stop(0.1f, SolidColor.RED);
            Stop stop2 = new Stop(0.4f, SolidColor.YELLOW);
            Stop stop3 = new Stop(0.6f, SolidColor.GREEN);
            yaxis.setStops(stop1, stop2, stop3);

            PlotOptionsSolidgauge plotOptions = new PlotOptionsSolidgauge();
            plotOptions.getTooltip().setValueSuffix(" percent");
            DataLabels labels = new DataLabels();
            labels.setY(5);
            labels.setBorderWidth(0);
            labels.setUseHTML(true);
            labels.setFormat("<div style=\"text-align:center\"><span style=\"font-size:25px;\">{y}</span><br/>"
                    + "                       <span style=\"font-size:12pxg\">percent</span></div>");
            plotOptions.setDataLabels(labels);
            getConfiguration().setPlotOptions(plotOptions);

            final ListSeries series = new ListSeries("percent", (Math.round(dataContainer.getRevenueRate()*100.0)/100.0));
            getConfiguration().setSeries(series);

            drawChart(getConfiguration());
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    public class ProjectDetailChart extends Chart {

        public ProjectDetailChart(DataContainer dataContainer) {
            int year = 2017;

            LocalDate periodStart = new LocalDate(year-1, 7, 01);
            LocalDate periodEnd = new LocalDate(year, 6, 30);

            setWidth("100%");
            setHeight("280px");

            setCaption("Project Detail");
            getConfiguration().getChart().setType(ChartType.COLUMN);

            //getConfiguration().getChart().setId("chart");

            getConfiguration().setTitle("IKKE FÆRDIG");
            //getConfiguration().setSubTitle("WORK IN PROGRESS - NOTHING TO SEE HERE...");
            getConfiguration().getLegend().setEnabled(false);

            XAxis x = new XAxis();
            x.setType(AxisType.CATEGORY);
            getConfiguration().addxAxis(x);
            getConfiguration().getxAxis().getLabels().setEnabled(false);

            YAxis y = new YAxis();
            y.setTitle("Revenue");
            getConfiguration().addyAxis(y);

            PlotOptionsColumn column = new PlotOptionsColumn();
            column.setCursor(Cursor.POINTER);
            column.setDataLabels(new DataLabels(true));
            column.getDataLabels().setFormatter("this.y +'kkr'");

            getConfiguration().setPlotOptions(column);

            Tooltip tooltip = new Tooltip();
            tooltip.setHeaderFormat("<span style=\"font-size:11px\">{series.name}</span><br>");
            tooltip.setPointFormat("<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}</b><br/>");
            getConfiguration().setTooltip(tooltip);


            DataSeries series = new DataSeries();
            series.setName("Project Revenue");
            PlotOptionsColumn plotOptionsColumn = new PlotOptionsColumn();
            plotOptionsColumn.setColorByPoint(true);
            series.setPlotOptions(plotOptionsColumn);

            for (AmountPerItem projectRevenue : dataContainer.getProjectRevenue()) {
                DataSeriesItem item = new DataSeriesItem(projectRevenue.description, projectRevenue.amount);
                DataSeries drillSeries = new DataSeries(projectRevenue.description);
                PlotOptionsColumn plotOptions = new PlotOptionsColumn();
                plotOptions.setStacking(Stacking.NORMAL);
                drillSeries.setPlotOptions(plotOptions);
                drillSeries.setId(projectRevenue.description);
                String[] categories = new String[] { "Task 1", "Task 2",
                        "Task 3", "Task 4" };
                Number[] ys = new Number[] { 10.85, 7.35, 33.06, 2.81 };
                // TODO: FINISH DRILLSERIES
                //drillSeries.setData(categories, ys);
                Map<String, AmountPerItem> taskAmountPerItem = new HashMap<>();
                //drillSeries.add(new DataSeriesItem(amountPerItem.uuid, amountPerItem.amount));
//drillSeries.setStack(amountPerItem.description);
                //dataAccess.getWorkPerUserPerTaskByProject(projectRevenue.uuid).stream().filter(amountPerItem -> !taskAmountPerItem.containsKey(amountPerItem.uuid)).forEach(amountPerItem -> taskAmountPerItem.put(amountPerItem.uuid, amountPerItem));

                for (String taskName : taskAmountPerItem.keySet()) {

                }
                series.addItemWithDrilldown(item, drillSeries);
            }
            getConfiguration().addSeries(series);
            Credits c = new Credits("");
            getConfiguration().setCredits(c);
        }
    }

    /*

     */
}
